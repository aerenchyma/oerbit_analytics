

Open.Michigan Analytics Project v1.0

Overview

- Drupal module intended for Open.Michigan's installation of OERbit
	dependent on modules: Elysia Cron, Google Analytics API
	uses code openly sourced from Google Analytics Counter module (expect this to change in 1.2 or so?)
	also dependent on Open.Michigan's database structure, special OM modules, course structure, aliases

- Shows information on each course landing page
	Number of total visits to the course landing page (same #s are shown regardless of which tab is in focus, so long as you are within the course's path, e.g. /education/med/m2/cardio shows same info as /education/med/m2/cardio/materials) -- the total visits number should be updated for greater accuracy in 1.1?
	Number of total bulk downloads (called "downloads" currently) -- represented by number of loads of the page on which you can download a zip folder of all the course materials
	Number of total views of the YouTube content (videos) associated with that course

- Display uses HTML block-generated in the PHP code of the module, CSS loaded within the module, and JavaScript/jQuery loaded within the module
	Button that can be hidden or shown via clicks
	Future: iFrame with charts shown on click? + more future decisions to be made about display.



Technical Architecture

- The process:
	Module installed: requires saving oer_analytics module folder in sites/all/modules in the OERbit/Drupal installation, enabling it, Elysia Cron, and Google Analytics API. Google Analytics API module must be configured (in the Drupal interface) with your information. The analytics module itself must be configured in that you must acquire a YouTube API key (a long alphanumeric string, found at code.google.com/apis/console if you are logged in to the appropriate google account -- there you can also enable the YouTube Data API v3.0, which is needed) and put that in the waiting text box at admin/settings/oer-analytics (assuming you are signed in as a site administrator).

- Using:
	YouTube API v3.0 ()
	Google Analytics  ()
	future: YouTube Analytics API ()


- Information Holding Structure

Database tables: {oer_analytics_vids},  {oer_analytics_youtube} (Google Analytics values currently gathered via caching and are stored on the Google servers)

{oer_analytics_vids}
	FIELDS: videoid, course_nid, totalviews
	PRIMARY KEY: videoid
	FUNCTION: holds information per-video whose link is embedded in the OERbit installation. Allows easy discovery of how many videos are associated with each course. The course_nid field allows for aggregation of video information by course.

{oer_analytics_youtube}
	FIELDS: course_nid, totalviews
	PRIMARY KEY: course_nid
	FUNCTION: holds aggregate information about YouTube content per course on OERbit. It is this table from which information is drawn to show in the display on OERbit.


n.b. In future, the YouTube-associated tables may hold columns for other YT information, e.g. comments or favorites, which is possible now but the numbers are not currently especially interesting to us or to users.


- Information Access
	- The module is built into a Drupal Context (the Context module) such that no content will be displayed unless the path of the currently focused page matches a course landing page or subdomain (e.g. /education/si/si508/fall2008, /education/si/si508/fall2008/materials, /education/med/m1/immunology, etc)

	- The Elysia Cron module allows the cron job for the oer_analytics module to run parallel to the other cron jobs on Open.Michigan's OERbit, because it takes a long time. Analytics module cron runs approximately once a day. In doing so, it follows the query process that follows.

		On installation, creation of tables: {oer_analytics_vids}, whose primary key is videoid (a unique identifier of a YouTube video), and {oer_analytics_youtube}, whose primary key is course_nid (the node id in Drupal of a given course)

		On a cron run, 

			QUERY: in oerpublish database (the overall OERbit database), tables content_field_video and content_field_course_reference
				for the fields field_course_reference_id and field_video_value
				  where the nid (node id) fields in both tables match (thus referring to the same course) and in the content_field_video table, the field_video_provider field == 'youtube', thus ensuring it is a YouTube video link embedded in the OERit installation.
			This query groups the results by field_video_value (the same as the videoid), thus ensuring that results do not repeat in the analytics database tables.

			From the result of this query, a couple of data structures are generated: an associative array of videoid=>course-node-id, an array of videoids included in the OERbit install.

			There is also a query made to the {oer_analytics_vids} table for all videoids currently being tracked by the analytics module (being included in that table implies tracking by the analytics module), and an array created of currently-tracked videos (let's call it currvids).

			case NO VIDS ARE YET TRACKED (and that array currvids is EMPTY):
				for each video, there is a check to make sure that the video is a real video
				a function is called to get data from the YouTube Data API (currently, views, but many pieces of data are available)
				an array is built to specify the videoid, course_nid, and totalviews fields/values for a new row in the db table
				drupal_write_record() function is called to insert a row into the table

				and so on for each video. Due to the original query to gather the video information, there will be no duplicates.

				The information is then aggregated by course into an associative array, and within a foreach loop, an array is built to represent each new row of the {oer_analytics_youtube} table; a new row is inserted for each course.

			case that array currvids is NOT empty:
				use array_diff() function to find the videoids that are not being tracked by the analytics module (the difference between videos in the OERbit install overall vs the videos in the analytics vids table)

				call the same functions, UPDATE values that have changed, which should only be the totalviews value 
					(update rather than inserting -- this is a slightly different drupal_write_record syntax: if updating, you must specify the primary key as the last parameter of drupal_write_record, but not so if inserting)

					insert new values for those videos that are not yet being tracked by analytics module/in analytics module tables (98% sure this is working, but needs testing! TODO)

				aggregate in associative array like in previously stated case and update/insert rows in {oer_analytics_youtube} as ought (also 98% sure this is working but TODO needs testing)

		On each page load,
			Check to see whether it's a course page -- as the module only runs on those. If so, continues.

			Google Analytics Counter code looks for number of times Google Analytics API has been called within last 24 hours (so as not to overload the rate limit)

			If it shouldn't be called again, grabs the latest google analytics views number for that course (these are continually stored on the google server for our google analytics) -- module specifies that this number currently should be views of course _landing_ page so as not to doublecount if one clicks from landing page to materials page, for example, but this number accuracy will be further updated soon -- and pushes it to the display.

			If it may be called again, the 'newest number' is essentially refreshed to the latest, which is pushed to the display, and cached for next time if needed.

			This doesn't really happen precisely _after_ the database machinations for the YouTube information, but it is accurate enough to represent it that way since the YouTube information flow happens closer to _our own_ (Open.Michigan's) backend.

			Caching and retrieval code primarily from Google Analytics Counter module (which is released under the MIT license, open with attribution and not copyleft), but the complication of this system is something hopefully to be refactored in a future release for simplicity, and such that the code is exclusively designed for us + with fewer dependencies (potentially -- there are things to research in pursuit of this).


Drupal Gotchas (for non-Drupal-programmers)

- each (or nearly each) path on a Drupal site a la Open.Michigan's OERbit is aliased: each particular path/sub-path is identified in the underlying structure by a node number.
	- each node has a type (we have user-defined types, e.g. course, id'd by Open.Michigan modules, etc -- this is a high-level summary) -- but relevant is that /education/si/si508/fall2008/materials is not a sub-path of /education/si/si508/fall2008 really; that /materials page is a different node, which is essentially a child of the /education/si/si508/fall2008 node.

- the CSS and js files for the individual module may be -- and in this case are -- loaded via the module itself, but they also must interact with the css (and in most cases not js) that the site overall relies on; these interact in a few somewhat-complicated ways (in comparision to a less hierarchical application/a non-CMS site)






