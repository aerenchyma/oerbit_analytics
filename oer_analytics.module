<?php
// $Id$

// TODO simplify nonmodifications

/*
 * All original work,
 * COPYRIGHT 2013
 *
 * The Regents of the University of Michigan
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * any later version.
 *
 * You may not use the name of The University of Michigan in any
 * advertising or publicity pertaining to the use of distribution of this software
 * without specific, written prior authorization. If the above copyright notice
 * or any other identification of the University of Michigan is included in any
 * copy of any portion of this software, then the disclaimer below must
 * also be included.
 *
 * THIS SOFTWARE IS PROVIDED AS IS, WITHOUT REPRESENTATION
 * FROM THE UNIVERSITY OF MICHIGAN AS TO ITS FITNESS FOR ANY
 * PURPOSE, AND WITHOUT WARRANTY BY THE UNIVERSITY OF
 * MICHIGAN OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING
 * WITHOUT LIMITATION THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
 * REGENTS OF THE UNIVERSITY OF MICHIGAN SHALL NOT BE LIABLE
 * FOR ANY DAMAGES, INCLUDING SPECIAL, INDIRECT, INCIDENTAL, OR
 * CONSEQUENTIAL DAMAGES, WITH RESPECT TO ANY CLAIM ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OF THE SOFTWARE, EVEN
 * IF IT HAS BEEN OR IS HEREAFTER ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGES.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
require_once 'simple_html_dom.php'; // does this work?

/**
* Form builder. Configure oer_analytics module.
* 
* @see system_settings_form()
*/

function oer_analytics_admin() {
  $form = array();
  $form['oer_analytics_gac_key'] = array(
    '#type' => 'textfield',
    '#title' => t('YouTube account application key'),
    '#size' => 128,
    '#maxlength' => 1024,
    '#default_value' => variable_get('oer_analytics_gac_key', NULL),
    '#description' => t('The secret key your YouTube Data API requires.'),
    '#required' => TRUE,
  );

  $form['keyfile_code'] = array(
    '#type' => 'textfield',
    '#title' => t('keyfile code for google apis'),
    '#size' => 128,
    '#maxlength' => 1024,
    '#default_value' => variable_get('keyfile_code', NULL),
    '#description' => t('The secret keyfile hash for google APIs working.'),
    '#required' => TRUE,
  );

  $form['google_apps_client_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Google apps client id'),
    '#size' => 128,
    '#maxlength' => 1024,
    '#default_value' => variable_get('google_apps_client_id', NULL),
    '#description' => t('The client ID required by google apps.'),
    '#required' => TRUE,
  );

  $form['google_apps_client_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Google apps client email give permissions in your analytics acct'),
    '#size' => 128,
    '#maxlength' => 1024,
    '#default_value' => variable_get('google_apps_client_email', NULL),
    '#description' => t('the client email required by google apps and analytics'),
    '#required' => TRUE,
  );

  $form['googleanalytics_profileid'] = array(
    '#type' => 'textfield',
    '#title' => t('Google Analytics profile ID number'),
    '#size' => 128,
    '#maxlength' => 1024,
    '#default_value' => variable_get('googleanalytics_profileid', NULL),
    '#description' => t('The Google Analytics profile ID relevant here'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
  '#type' => 'submit',
  '#value' => t('Save'),
  );
  return system_settings_form($form);
}


// hook_menu -- will document properly shortly TODO
function oer_analytics_menu() {

  $items = array();

  $items['admin/settings/oer-analytics'] = array(
    'title' => 'Open.Michigan Analytics module settings',
    'description' => 'Description of your analytics settings page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oer_analytics_admin'),
    'access arguments' => array('administer oeranalytics settings'),
    'type' => MENU_NORMAL_ITEM,
   );

  $items['oer_analytics/getdashboardinfo'] = array(
    'page callback' => 'oer_analytics_get_dashboard_info',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $items;
}


// specified callback function to get info for dashoard
function oer_analytics_get_dashboard_info($nid) {
  log_to_apache("oer_analytics_get_dashboard_info: called with node {$nid}");
  $strres = db_query("SELECT base_db_json FROM {oer_analytics_courses} WHERE nid = %d", $nid);
  while ($r = db_fetch_object($strres)) {
    $json_str = $r->base_db_json;
  }
  //// test data for json str
  //$json_str = '{"youtube_metrics":{"yt_metrics":{"views":29,"likes":111,"comments":7}},"nations":["USA","Canada"],"nations_num":{"num_nations":2},"course_views":{"total_course_views":"19,670","data":[{"x":20140319,"y":2},{"x":20140320,"y":4},{"x":20140321,"y":0},{"x":20140322,"y":4},{"x":20140323,"y":3},{"x":20140324,"y":7},{"x":20140325,"y":9},{"x":20140326,"y":5},{"x":20140327,"y":30},{"x":20140328,"y":6},{"x":20140329,"y":9},{"x":20140330,"y":22},{"x":20140331,"y":2},{"x":20140401,"y":4},{"x":20140402,"y":8},{"x":20140403,"y":10},{"x":20140404,"y":4},{"x":20140405,"y":7},{"x":20140406,"y":2},{"x":20140407,"y":1},{"x":20140408,"y":0},{"x":20140409,"y":7},{"x":20140410,"y":4},{"x":20140411,"y":1},{"x":20140412,"y":3},{"x":20140413,"y":5},{"x":20140414,"y":7},{"x":20140415,"y":4},{"x":20140416,"y":8}]},"dls_data":[{"x":20140319,"y":3},{"x":20140320,"y":8},{"x":20140321,"y":2},{"x":20140322,"y":11},{"x":20140323,"y":3},{"x":20140324,"y":2},{"x":20140325,"y":8},{"x":20140326,"y":3},{"x":20140327,"y":2},{"x":20140328,"y":2},{"x":20140329,"y":3},{"x":20140330,"y":8},{"x":20140331,"y":2},{"x":20140401,"y":3},{"x":20140402,"y":22},{"x":20140403,"y":2},{"x":20140404,"y":8},{"x":20140405,"y":2},{"x":20140406,"y":3},{"x":20140407,"y":8},{"x":20140408,"y":14},{"x":20140409,"y":2},{"x":20140410,"y":3},{"x":20140411,"y":8},{"x":20140412,"y":4},{"x":20140413,"y":3},{"x":20140414,"y":2},{"x":20140415,"y":18},{"x":20140416,"y":3}]}';
  drupal_json(array('status' => "0", 'data' => $json_str));
}


/**
* @file
* Implements functions to grab media analytics for OERbit site
* Displays analytics on appropriate course or resource pages.
*/

/** Helper Functions **/

function today() {
  $today = getdate();
  $mon = $today["mon"];
  $day = $today["mday"];
  $yr = $today["year"];
  if ($mon < 10) {
    $mon = "0".$mon;
  }
  if ($day < 10) {
    $day = "0".$day;
  }
  $curr_date = $yr."-".$mon."-".$day;
  return $curr_date;
} 

function time_epoch_secs($timestr) {
  $yr = substr($timestr,0,4);
  $mon = substr($timestr,4,2);
  $day = substr($timestr,6,2); // till end basically
  return strtotime($yr."/".$mon."/".$day);
}

// implements hook_init(), docs later
function oer_analytics_init(){
  define('JQUERY_UPDATE_REPLACE_PATH', 'sites/all/libraries/jquery/1.5.2'); // hmmmm

  drupal_add_css(drupal_get_path('module', 'oer_analytics') .'/oer_analytics.css');

  drupal_add_js(drupal_get_path('module', 'oer_analytics') .'/oer_analytics.js');
  $variables['scripts'] = drupal_get_js();
}

function hook_js_alter(&$javascript) {
  // Swap out jQuery to use an updated version of the library. 
  $javascript['misc/jquery.js']['data'] = drupal_get_path('module', 'jquery_update') . '/jquery.js'; 
}

function oer_analytics_counter_get_searched_path() {
  $path = check_plain(implode('/', arg()));
  return $path;
}

/* get (correct, aliased) page path from an OERbit node number */
function get_pagepath($nodenum) {
  $from_db = db_query("SELECT dst FROM {url_alias} WHERE src LIKE 'node/{$nodenum}'");
  while ($paths = db_fetch_object($from_db)) {
    $p = $paths->dst;
  }
  //dpm($p); // debug! working?
  return $p;
} // TODO may need improved error checking at some point

// $path = explode("gac_get_count", $path);
//   $path = $path[1];
//   // We have something like /node/264455. Remove the leading slash.
//   $path = trim(substr($path, 1));
//   $sumarray = google_analytics_counter_get_sum_per_path($path);

function landingpg_path($fullpath) {
  $fullpath = str_replace("/materials", "", $fullpath);
  $fullpath = str_replace("/highlights", "", $fullpath);
  $fullpath = str_replace("/sessions", "", $fullpath);
  return $fullpath;
}

function get_video_title($videoid) { // NEW
    $api_key = variable_get('oer_analytics_gac_key', array()); 
    $baseurl = "https://www.googleapis.com/youtube/v3/videos?id={$videoid}&key={$api_key}&part=snippet";

    $JSON_first = drupal_http_request($baseurl);
    $JSON = $JSON_first->data;
    $json_data = json_decode($JSON);
    $title = $json_data->{'items'}[0]->{'snippet'}->{'title'}; 
    return $title;
}

function get_video_data($videoid) { // NEW
    $api_key = variable_get('oer_analytics_gac_key', array()); 
    $baseurl = "https://www.googleapis.com/youtube/v3/videos?id={$videoid}&key={$api_key}&part=snippet,statistics";

    $JSON_first = drupal_http_request($baseurl);
    $JSON = $JSON_first->data;
    $json_data = json_decode($JSON);
    $tmp = $json_data->{'items'}[0]->{'statistics'};
    //print $tmp;
    $views = (int) $tmp->{'viewCount'};
    $likes = (int) $tmp->{'likeCount'};
    $dislikes = (int) $tmp->{'dislikeCount'};
    $favs = (int) $tmp->{'favoriteCount'};
    $comments = (int) $tmp->{'commentCount'};
    $title = $json_data->{'items'}[0]->{'snippet'}->{'title'}; 
    //return $title;
    //return $views; // can easily update to return and then store all other vals
    $aggStats = array();
    $aggStats['views'] = $views;
    $aggStats['comments'] = $comments;
    $aggStats['likes'] = $likes;
    return $aggStats; // changed such that get_video_data returns an associative array
}


/********* HOOK METHODS *********/


/**
* Implements Cron (parallel) via elysia_cron module.
*/

function oer_analytics_cronapi() { // $op and $job = NULL params -- ?? necessary, if so what here?
  $items['oer_analytics_cron'] = array(
    'description' => 'Perform updates/new population of db tables for oer_analytics module.',
    'rule' => '0 2 * * *', // every day at 2am
    'callback' => '_oer_analytics_prepcron',
    'arguments' => array('all'), // ?
  );

  return $items;
}



// Would-be implementing hook_cron(); populates and updates database tables for analytics module.
function _oer_analytics_prepcron() { 
//function oer_analytics_cron() { // for testingonly

  require_once 'google-api-php-client/src/Google_Client.php';
  require_once 'google-api-php-client/src/contrib/Google_AnalyticsService.php';
  require_once 'simple_html_dom.php'; 

  $vid_db_info = db_query('SELECT field_course_reference_nid, field_video_value FROM {content_field_video} INNER JOIN {content_field_course_reference} WHERE content_field_video.vid = content_field_course_reference.vid AND content_field_video.field_video_provider="youtube" ORDER BY field_course_reference_nid'); 

  //// get ALL courses
  //// DATAGRAB 
  $all_courses = db_query("SELECT nid FROM {content_type_course}");
  $allcourses = array();
  while ($row = db_fetch_object($all_courses)) {
    array_push($allcourses, $row->nid); // this array will hold ALL things of type course in OERbit
  }

  // foreach($allcourses as $cnid) {
  //   $node = node_load($cnid); 
  //   if ($node->status) { // if the node is published
  //     $inparr = array('course_nid'=>$cnid);
  //     drupal_write_record('oer_analytics_data', $inparr);
  //   }
  // }
  //// END DATAGRAB

  $all_vids_arr = array();
  while ($row = db_fetch_object($vid_db_info)) {
    $vid = $row->field_video_value;
    $cnid = $row->field_course_reference_nid;
    $all_vids_arr[$vid] = array('course_nid' => $cnid, 'already_tracked' => 0);
  }
  //drupal_set_message('got the list of ALL the videos');
  //dvm($all_vids_arr);

  // Get the list of the video IDs we currently have numbers for
  $currvids = db_query('SELECT videoid FROM {oer_analytics_vids}');
  while ($row = db_fetch_object($currvids)) {
    $vi = $row->videoid;
    if (array_key_exists($vi, $all_vids_arr)) {	// May have been deleted
      //drupal_set_message("Video ID {$vi} is already being tracked");
      $all_vids_arr[$vi]['already_tracked'] = TRUE;
    } else {
      //drupal_set_message("Video ID {$vi} appears to have been deleted");
    }
  }

  // For each current video, get the view count and write out the
  // updated (or new) entry with the view count for that video
  foreach($all_vids_arr as $vid_id => $info) {
    if (strpos($vid_id, "PLAYLIST") !== FALSE) {
      //drupal_set_message("Skipping video with id {$vid_id} (it is a PLAYLIST)");
      continue;
    }
    $vidarr = get_video_data($vid_id);
    $data_views = $vidarr['views'];
    $inp_arr = array('videoid' => $vid_id,
                     'course_nid' => $info['course_nid'],
		     'totalviews' => $data_views, 'totalcomments' => $vidarr['comments'], 'totallikes' => $vidarr['likes']);
    if ($info['already_tracked'] === TRUE) {
      //drupal_set_message("oer_analytics_vids already has an entry for videoid {$vid_id}");
      drupal_write_record('oer_analytics_vids', $inp_arr, 'videoid');
    } else {
      //drupal_set_message("creating a new entry in oer_analytics_vids for videoid {$vid_id}");
      drupal_write_record('oer_analytics_vids', $inp_arr);
    }
  }

  // Get the list of the courses we currently have numbers for
  $curr_courses_arr = array();
  $currcourses = db_query('SELECT course_nid from {oer_analytics_youtube}');
  while ($row = db_fetch_object($currcourses)) {
    $curr_courses_arr[] = $row->course_nid;
  }
  //drupal_set_message('got the list of ALL the currently tracked courses from oer_analytics_youtube');
  //dvm($curr_courses_arr);

  // Acccumulate the view count for all the videos for each course
  $yt_info = array();
  $now_vids = db_query("SELECT course_nid, totalviews FROM {oer_analytics_vids}"); // TODO secure
  while ($row = db_fetch_object($now_vids)) {
    //$video_id = $row->videoid;
    $coursenid = $row->course_nid;
    $views = $row->totalviews;
    // this one-element non-array is fragile for current setup
    if (array_key_exists($coursenid, $yt_info)) {
      $yt_info[$coursenid] += (int) $views;
    } else {
      $yt_info[$coursenid] = (int) $views;
    }
  }

  // Write out the updated (or new) entries with the total view count for each course
  foreach($yt_info as $cnid => $yt_viewnum) {
    $inp_arr = array('course_nid' => $cnid,
                     'totalviews' => $yt_viewnum);
    if (array_search($cnid, $curr_courses_arr) !== FALSE) {
      //drupal_set_message("oer_analytics_youtube already has an entry for course {$cnid}");
      drupal_write_record('oer_analytics_youtube', $inp_arr, 'course_nid');
    } else {
      //drupal_set_message("creating a new entry in oer_analytics_youtube for course {$cnid}");
      drupal_write_record('oer_analytics_youtube', $inp_arr);
    }
  }


    class GoogleAnalyticsData
  {

    private $client_secrets = 'client_secrets.json'; // require client_secrets file in directory
    private $profileid = variable_get('googleanalytics_profileid', array()); // this one inconsistent. TODO fix.

    function __construct($nnum) { // class constructor
       //print "In constructor\n";
       $this->pgpath = "/" . get_pagepath($nnum); // this should still work like a public instance var of the class, right?
       $this->nodenum = $nnum;
    }

    function initialize_service() { 
      //session_start();
      //$json = file_get_contents("client_secrets.json"); // need at least profile id, secure info later
      $client_id = variable_get('google_apps_client_id', array());
      //const SERVICE_ACCOUNT_NAME = 'OpenMichigan Metrics';
      $keyfile = variable_get('keyfile_code',array());
      // IMP: make sure that email for service account is added to analytics account access, otherwise this will not work
      $key = file_get_contents($keyfile);//(String) drupal_http_request($keyfile);
      // Initialize the Google Client object
      $access_email = variable_get('google_apps_client_email',array());
      $client = new Google_Client();
      $client->setApplicationName('OpenMichigan Metrics');
      $client->setAssertionCredentials(
              new Google_AssertionCredentials(
              $access_email, array('https://www.googleapis.com/auth/analytics.readonly'), $key
              ) 
      );
      $client->setClientId($client_id);
      $client->setAccessType('offline_access');
      $analytics = new Google_AnalyticsService($client); // does this make it avail to whole class?
      return $analytics;
    } // end initialize_service

    function get_bulk_dl_link() {
      $url = "http://open.umich.edu" . $this->pgpath;
      $html = file_get_html($url);
      if ($html) {
        foreach($html->find('a') as $element) {
          if (preg_match("%Download all materials%",$element->innertext) != FALSE) {
            $dlsurl = $element->href;
            //print $dlsurl;
          }
        }
        return $dlsurl;
      }
      else {
        return "";
      }
    } // end get_bulk_dl_link

    function get_vid_ids() {
      $url = "http://open.umich.edu" . $this->pgpath . "/materials"; 
      //echo $url;
      //dpm($url);
      log_to_apache("vid ids url: {$url}");
      $html = file_get_html($url);
      //$yt_links = array();
      $vid_ids = array();
      foreach($html->find('a') as $element) {
        if (preg_match("%youtube%",$element->href) != FALSE && $element->href != "http://www.youtube.com/user/openmichigan") {
          //array_push($yt_links, $element->href);
          $link = $element->href;
          $ind = strpos($link, "watch?v=");
          $plc = substr($link, $ind+8, $ind+19);
          //log_to_apache("vid id: {$plc}");
          array_push($vid_ids, $plc);
        }
      }
      return $vid_ids;
    } // end get_vid_ids

    function youtube_metrics() {
      // get youtube metics from db, that should've already run 'n stuff
      // if they exist, output them in associative array like $aggregateStats was
      // if not, return "No YouTube content"
      // all these queries should be to db, not to external req.
      $yt_stuff = db_query("SELECT course_nid, totalviews, totalcomments, totallikes FROM {oer_analytics_youtube} WHERE course_nid = %d", $this->nodenum);
      //dpm($yt_stuff); // debug
      $ty = gettype($yt_stuff);
      log_to_apache("type of yt stuff: {$ty}");
      $ytstuff_course = array();
      while ($r = db_fetch_object($yt_stuff)) { // should be just one row, possible better way. TODO.
        $ytstuff_course['views'] = $r->totalviews;
        $ytstuff_course['comments'] = $r->totalcomments;
        $ytstuff_course['likes'] = $r->totallikes;
      }
      log_to_apache("checking youtube metrics in class");
      //log_to_apache("for example, views: {$ytstuff_course['views']}");
      if ($ytstuff_course['views'] >= 1) {
        return $ytstuff_course;
      }
      else {
        return "No YouTube content"; // TODO check
      }

    }

    function om_api_courseviews() {
      $url = "http://open.umich.edu" . $this->pgpath;
      log_to_apache("url: {$url}");
      $html = file_get_html($url);
      //log_to_apache("html for find: {$html}");
      if (strpos($this->pgpath, "/education/med/mep/") === FALSE) { // fix for local install with old db
        $vizid = $html->find('p[id=visits-num]');
        $str_visits = $vizid[0]->innertext;
        //echo $str_visits . PHP_EOL;
        return $str_visits;
      }
    } // end om_api_courseviews

    function main() {
      $analytics_do = $this->initialize_service();
      $lastMonth = date('Y-m-d', strtotime('-4 week'));
      $foreverago = date('2005-01-01');
      $today = date('Y-m-d');
      $metrics = "ga:pageviews"; // number of s/visits/pageviews 
      $dimensions = "ga:date"; // by days
      $places_dims = "ga:country"; //,ga:region -- maybe later
      $sort = "ga:date"; // order by date
      $sort_pl = "-ga:pageviews";
      $filters = "ga:pagePath==" . $this->pgpath; 
      log_to_apache("filters is: {$filters}");
      $bulklink = $this->get_bulk_dl_link();
      if ($bulklink != "") {
        $dls_filters = "ga:pagePath==" . $this->get_bulk_dl_link();
        $dlsflag = TRUE;
      }
      $analytics_id = "ga:" . $this->profileid;
      $optParams = array('dimensions' => $dimensions, 'sort' => $sort, 'filters' => $filters);
      $places_params = array('dimensions' => $places_dims, 'sort' => $sort_pl, 'filters' => $filters);
      if ($dlsflag) {
        $dls_params = array('dimensions' => $dimensions, 'sort' => $sort, 'filters' => $dls_filters);
      }
      try {
        $results = $analytics_do->data_ga->get($analytics_id, $lastMonth, $today, $metrics, $optParams);
        if ($dlsflag) { 
          $dls_res = $analytics_do->data_ga->get($analytics_id, $lastMonth, $today, $metrics, $dls_params);
        }
        $places_res = $analytics_do->data_ga->get($analytics_id, $foreverago, $today, $metrics, $places_params);

      } catch (Exception $e) {
          //dpm(t('There was an error : - ' . $e->getMessage())); // diff error catching? TODO
          dpm(t("Error -- filters is: {$filters}"));
          dpm(t($e->getMessage()));
      }

      $timeseries = array();
      $dlstimesr = array();
      $places = array();
      $data = $results['rows']; // This is the time series data
      $dls_data = $dls_res['rows'];
      $pl_data = $places_res['rows'];

      foreach ($data as $d) {
        $timeseries[$d[0]] = $d[1];
      }
      if ($dlsflag) {
        foreach ($dls_data as $dd) {
          $dlstimesr[$dd[0]] = $dd[1];
        }
      }
      $nations = array();

      foreach ($pl_data as $dl) {
        if ($dl[0] != "(not set)") {
          //// not needed because not lookin at region atm
          // if ($dl[1] != "(not set)") { 
          //  $places[$dl[0]] = $dl[1]; // hmm does this keep order?
          // } else {
          //  $places[$dl[0]] = "";
          // }
          $places[$dl[0]] = "";
        }
      }
      foreach ($places as $country=>$reg) {
        array_push($nations,$country);
      }
      //print_r(array_values($nations));
      $xyvals = array();
      $dlsxy = array();
      foreach ($timeseries as $a=>$b) {
        $timest = $a;//(int) time_epoch_secs($a);//(int) $a; //time_epoch_secs($a);
        $b = (int) $b;
        array_push($xyvals,array("x"=>$timest,"y"=>$b));
      }
      if ($dlsflag) {
        foreach ($dlstimesr as $e => $f) {
          $t = (int) $e;//time_epoch_secs($e); // right? 
          $r = (int) $f;
          array_push($dlsxy, array("x"=>$t,"y"=>$r));
        }
      } // TODO reorg so there are fewer checks and the dlsflag business is neater
      
      //print_r(array_values($xyvals));

      //return $timeseries; // use this to create json file -- that data
      $final_data = array();
      $ytm = $this->youtube_metrics();
      //$final_data['youtube_metrics']["yt_metrics"] = $ytm;
      //$final_data['course_nid'] = 
      $final_data['youtube_views'] = $ytm['views']; // for CSV DATA
      $final_data['nations'] = array_slice($nations,0,10); // nations not sorted properly?
      $final_data['nations_num']['num_nations'] = count($nations);
      $final_data['course_views']['total_course_views'] = $this->om_api_courseviews();
      $final_data['course_views']['data'] = $xyvals;
      $final_data['dls_data'] = $dlsxy;
      //dpm($final_data);
      //return $final_data;
      //// following commented out JUST FOR CSV DATA
      $str_for_json = (String) json_encode($final_data); // cast array that could be written to json to a string
      return $str_for_json;
    }

  }
  // $test_nid = 999;
  // $test_var = new GoogleAnalyticsData($test_nid);

  // //// get ALL courses
  // $all_courses = db_query("SELECT nid FROM {content_type_course}");
  // $allcourses = array();
  // while ($row = db_fetch_object($all_courses)) {
  //   array_push($allcourses, $row->nid); // this array will hold ALL things of type course in OERbit
  // }
  //dpm($allcourses[3]);

  // // get all courses currently in the db table -- surely there's a faster/better way to do this TODO
  // $gc = db_query("SELECT nid FROM {oer_analytics_courses}");
  //$got_courses = array();
  // while ($r = db_fetch_object($gc)) {
  //   array_push($got_courses, $r->nid);
  // }

  // //fake all-courses array for testing this with just a few courses
  // $python_node = 1388;
  // $stats_node = 4583;
  // $cardio2node = 1945;
  // $got_courses = array();
  // array_push($got_courses, $python_node);
  // array_push($got_courses, $stats_node);
  // array_push($got_courses, $cardio2node);

  // $allcourses = array();
  // array_push($allcourses, $python_node);
  // array_push($allcourses, $stats_node);
  // array_push($allcourses, $cardio2node);


//// if commented out, that's to speed up another test
  $all_data_now = array();
  foreach($allcourses as $c) {
    log_to_apache("here is node num");
    log_to_apache($c);
    $node = node_load($c); // can you node-load just a nid? I think so.
    if ($node->status) { // if the node is published (ie the node's status is not 0)
      log_to_apache("check says published - ".$c);
      //$currp = get_pagepath($c);  // this happens in class instantiation (or it should) TODO CHECK

      //// following should uncomment for CSV DATA BUSINESS if the other stuff in main is avail to run
      // $m = new GoogleAnalyticsData($c); // pass in node number and this should be okay

      // $st = $m->main(); // returns the string for json -- in CSV data mode, returns array of data
      // $st['course_nid'] = $c; // hopefully working TODO get unit and course title in here
      //array_push($all_data_now, $st);
      // so now hopefully $st is an array with all the data, except it isn't working like we want actually, so get accurate values and put them in db


      //// following commented out just for CSV DATA
      $ip = array('nid'=>$c,'base_db_json'=>$st);
      ////now, make database checks and addor update oer_analytics_courses table  
      //if (array_search($c, $got_courses) !== FALSE) { // there's already an entry for this course
        drupal_write_record('oer_analytics_courses', $ip, 'nid'); // no new courses in this test, so removed the check
        $a = memory_get_usage(); // checking memory usage because of prev overload
        log_to_apache($a);
      //} 
      // end commented out for CSV DATA, remainder commented out because the else case wasn't set up yet

      // else { // this is a new course, new record
      //   drupal_write_record('oer_analytics_courses', $ip);
      // }
    }
  }

  // GET CSV CODE
  // $f = open("tmpdata.csv","w");
  // //fputcsv($f, array(""))
  // foreach($all_data_now as $arr) {
  //   fputcsv($f, $arr);
  // }
  // fclose($f);
  // END GET CSV CODE

} // end cron block


/**
* Implementation of hook_block().
*/
function oer_analytics_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks['oer-analytics'] = array(
        'info' => t('Course Analytics'),
        //'cache' => BLOCK_CACHE_PER_PAGE, // remember day cached, for speeding things up
      );
      $blocks['course-metrics'] = array(
        'info' => t('Course Metrics'),
        //'cache' => BLOCK_CACHE_PER_PAGE, // remember day cached, for speeding things up
      );
      return $blocks;
    case 'view':
      if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'metrics') {
        return _course_metrics_block(arg(1));
      }
      if (arg(0) == 'node' && is_numeric(arg(1))) { // node_load() -- check node type
        return _oer_analytics_block(arg(1)); // gets info that will be displayed
      }
  }
} 


function _course_metrics_block($nid) {
  //dpm("Here we are in _course_metrics_block!!"); // DEBUG




  $node = node_load($nid);
  if ($node->type == 'course') {
    drupal_add_js(drupal_get_path('module', 'oer_analytics') . '/d3/d3.js');

    $return_block = array ( 'subject' => t('Metrics Dashboard'), 'content' => <<<EOD
  <div id="wrapper">
    <!-- <div id="titlewrap"><h1>Metrics dashboard</h1></div> -->
    <div class="row">
      <div class="whole column">
        <h2>course views and zip downloads over the last 30 days</h2>
        <h5><span id="cviews"><span class="bluetext"><strong>blue</strong></span><span class="greytext">: <i>course page views</i> </span></span> <span class="neutraltext"><br></span> <span id="cdls"><span class="greentext"><strong>green</strong></span><span class="greytext">: <i>zip downloads</i></span></span></h5>
        <div id="courseViews" class="chart"></div>
      </div>
    </div><!--.row-->   
    <div class="row">
      <div class="half column">
        <h2>total course views since publication</h2>
        <div id="totalViews" class="biggestNumber"></div>
      </div>
      <div class="half column" id="nations">
        <h2 id="nations_title"></h2>          
          <ol id="top_nations"></ol>
      </div>
      <div class="half column">
        <h2 id="ytMetrics"></h2>
        
        <div class="row">
          <div class="half column yt">
            <div class="bigNumber" id="ytViews">
            </div>
            <h4>views</h4>
          </div>
          <div class="half column yt">
            <div class="bigNumber" id="ytLikes">
            </div>
            <h4>likes</h4>
          </div>
        </div>
        <div class="row">
          <div class="half column yt">
            <div class="bigNumber" id="ytComments">
            </div>
            <h4>comments</h4>
          </div>
        </div>

        <ul id="yt_stats_list">
        </ul>
      </div>
    </div><!--.row-->
    <div class="row">
      <div class="whole column">
        <h2></h2>
        <div id="totalDownloads"></div>
      </div>
    </div>
EOD
    );
    //dpr($return_block); // DEBUG
    return $return_block;
  }
}



function _oer_analytics_block($nid) {
  $node = node_load($nid);
  if ($node->type == 'course') { // may not be necessary, TODO
    $stats = array();
    $full_stats = array();
    $vidcount = array();

    // TEST GRAB JSON STRING -- is this going to take too long, I guess this could happen only on dashb load w/ the check TODO
    $grab_json = db_query('SELECT base_db_json FROM {oer_analytics_courses} WHERE nid = %d',$nid);
    while ($row = db_fetch_object($grab_json)) {
      $json_str = $row->base_db_json;
      //dpm($json_str); // DEBUG
      //$testtype = gettype(json_decode($json_str));
      //dpm($testtype);
    }

    //tmp -- many following queries should be consolidated; TODO
    $db_res = db_query('SELECT course_nid, totalviews, totalcomments FROM {oer_analytics_youtube} WHERE course_nid = %d', $nid);

    //oer_analytics_get_dashboard_info($nid); // including function here? check todo

    while ($row = db_fetch_object($db_res)) {
      //$yt_view = $row->oer_analytics_courses.totalviews;
      $yt_views = $row->totalviews;
      //$yt_comm = $row->totalcomments;
      $stats[$row->course_nid] = array($yt_views);
    }

    foreach($stats as $num=>$arr) {
      array_push($full_stats, number_format($arr[0]));
      array_push($full_stats, $num_rows);
    }

    $path = oer_analytics_counter_get_searched_path();
    //dpm($path);
    $path = landingpg_path($path);
    $course_path = $path; //landingpg_path($path);
    //dpm($course_path); // want to see path for moving to dashboard info
    $mat_path = $course_path . "/materials";
    $dls_path = $path . "/zip_download"; 
    //drupal_set_message("Downloads path is: " . $dls_path);

    $resultarr_one = google_analytics_counter_get_sum_per_path($course_path); // should be like $sumarray
    $resultarr_dls = google_analytics_counter_get_sum_per_path($dls_path);
    // dpr($resultarr_one);
    // dpr($resultarr_dls);

    $courseviews = $resultarr_one[0];
    //drupal_set_message($courseviews);
    $dls_views = $resultarr_dls[0];






    //drupal_set_message($dls_views);
    if ($dls_views > 10) {
      $ga_stats = array(number_format($courseviews), number_format($dls_views));
    } else {
      $ga_stats = array(number_format($courseviews));
    }

    drupal_add_js(drupal_get_path('module', 'oer_analytics') . '/d3/d3.js'); // TODO check does this work

    // fill in more later
    if (!empty($full_stats) && count($ga_stats) == 2) {
      //$most_watched_vid_val = most_watched_vid($nid);

      return array(
        //'subject' => t('Course Analytics'),
        //'content' => theme_item_list(array_merge($ga_stats, $full_stats))

        'content' => <<<EOD
  <div class="oer-analytics-button" id="oer-analytics-button">

  <button aria-text="close the analytics display" id="hiddenq"><p id="closebutton">&#10006;</p></button>
  <div class="oer-analytics" id="oer-analytics-visits">
    <span id="visits-num">
      <span id="googleanalytics-oer">
        <p class="statsnums" id="visits-num">{$ga_stats[0]}</p>
        <p class="oer-analytics-small-descr">views</p>
      </span>
      <span id="googleanalytics-dls">
        <p class="statsnums" id="dls-num">{$ga_stats[1]}</p>
        <p class="oer-analytics-small-descr">zip downloads</p>
      </span>
    </span>
  </div>

  <div class="oer-analytics" id="oer-analytics-yt-views">
    <span id="visits-num">
      <span id="yt-analytics">
        <p class="statsnums" id="yt-views">{$full_stats[0]}</p>
        <p class="oer-analytics-small-descr"><a href="/{$mat_path}">YouTube</a> views</p>
        <!-- <p id="mostviewedvid" class="oer-analytics-small-descr">most viewed video:</p>
        <p id="mostviewedvid_title" class="oer-analytics-small-descr">${most_watched_vid_val}</p> -->
      </span>
    </span>
  </div>

  </div>
  <button class="hovershow" id="oer-analytics-buttona" aria-label="click this for usage data on this course or resource" type="button"></button>

  <!-- adding content for TESTING only -->
 
  <div id="wrapper">
    <div id="titlewrap"><h1>metrics dashboard: M2 Cardio</h1></div>
    <div class="row">
      <div class="whole column">
        <h2>course views and zip downloads over the last 30 days</h2>
        <h5><span id="cviews"><span class="bluetext"><strong>blue</strong></span><span class="greytext">: <i>course page views</i> </span></span> <span class="neutraltext"><br></span> <span id="cdls"><span class="greentext"><strong>green</strong></span><span class="greytext">: <i>zip downloads</i></span></span></h5>
        <div id="courseViews" class="chart"></div>
      </div>
    </div><!--.row-->   
    <div class="row">
      <div class="half column">
        <h2>total course views since publication</h2>
        <div id="totalViews" class="biggestNumber"></div>
      </div>
      <div class="half column" id="nations">
        <h2 id="nations_title"></h2>          
          <ol id="top_nations"></ol>
      </div>
      <div class="half column">
        <h2 id="ytMetrics"></h2>
        
        <div class="row">
          <div class="half column yt">
            <div class="bigNumber" id="ytViews">
            </div>
            <h4>views</h4>
          </div>
          <div class="half column yt">
            <div class="bigNumber" id="ytLikes">
            </div>
            <h4>likes</h4>
          </div>
        </div>
        <div class="row">
          <div class="half column yt">
            <div class="bigNumber" id="ytComments">
            </div>
            <h4>comments</h4>
          </div>
        </div>

        <ul id="yt_stats_list">
        </ul>
      </div>
    </div><!--.row-->
    <div class="row">
      <div class="whole column">
        <h2></h2>
        <div id="totalDownloads"></div>
      </div>
    </div>

    <!-- end ADDING CONTENT FOR TESTING -->
EOD
);
    } else if (!empty($full_stats) && count($ga_stats) < 2) {
        return array(
        //'subject' => t('Course Analytics'),
        //'content' => theme_item_list(array_merge($ga_stats, $full_stats))

        'content' => <<<EOD
  <div class="oer-analytics-button" id="oer-analytics-button">

  <button aria-text="close the analytics display" id="hiddenq"><p id="closebutton">&#10006;</p></button>
  <div class="oer-analytics" id="oer-analytics-visits">
    <span id="visits-num">
      <span id="googleanalytics-oer">
        <p class="statsnums" id="visits-num">{$ga_stats[0]}</p>
        <p class="oer-analytics-small-descr">views</p>
      </span>
    </span>
  </div>

  <div class="oer-analytics" id="oer-analytics-yt-views">
    <span id="visits-num">
      <span id="yt-analytics">
        <p class="statsnums" id="yt-views">{$full_stats[0]}</p>
        <p class="oer-analytics-small-descr"><a href="/{$mat_path}">YouTube</a> views</p>
        <!-- <p id="mostviewedvid" class="oer-analytics-small-descr">most viewed video:</p>
        <p id="mostviewedvid_title" class="oer-analytics-small-descr">${most_watched_vid_val}</p> -->
      </span>
    </span>
  </div>

  </div>
  <button class="hovershow" id="oer-analytics-buttona" aria-label="click this for usage data on this course or resource" type="button"></button>
EOD
);


    } else if (!empty($ga_stats)) {

      if (!is_null($ga_stats[1])) {

      return array( 
        //'subject' => t('Course Analytics'),
        //'content' => theme_item_list($ga_stats)
        'content' => <<<EOD
  <div class="oer-analytics-button" id="oer-analytics-button">

<button aria-text="close the analytics display" id="hiddenq"><p id="closebutton">&#10006;</p></button>

  <div class="oer-analytics" id="oer-analytics-visits">
    <span id="visits-num">
      <span id="googleanalytics-oer">
        <p class="statsnums" id="visits-num">{$ga_stats[0]}</p>
        <p class="oer-analytics-small-descr">views</p>
      </span>
      <span id="googleanalytics-dls">
        <p class="statsnums" id="dls-num">{$ga_stats[1]}</p>
        <p class="oer-analytics-small-descr">zip downloads</p>
      </span>
    </span>
  </div>
  </div>

    <button class="hovershow" id="oer-analytics-buttona" aria-label="click this for usage data on this course or resource" type="button"></button>
EOD
      );
  } else if (!empty($full_stats) && empty($ga_stats)) {
    return array(
        //'subject' => t('Course Analytics'),
        //'content' => theme_item_list(array_merge($ga_stats, $full_stats))

        'content' => <<<EOD
<div class="oer-analytics-button" id="oer-analytics-button">

<button aria-text="close the analytics display" id="hiddenq"><p id="closebutton">&#10006;</p></button>
  
  <div class="oer-analytics" id="oer-analytics-yt-views">
    <span id="visits-num">
      <span id="yt-analytics">
        <p class="statsnums" id="yt-views">{$full_stats[0]}</p>
        <p class="oer-analytics-small-descr"><a href="/{$mat_path}">YouTube</a> views</p>
      </span>
    </span>
  </div>

</div>
<button class="hovershow" id="oer-analytics-buttona" aria-label="click this for usage data on this course or resource" type="button"></button>
EOD
);

  } else {
    return array( 
        //'subject' => t('Course Analytics'),
        //'content' => theme_item_list($ga_stats)
        'content' => <<<EOD
<div class="oer-analytics-button" id="oer-analytics-button">

<button aria-text="close the analytics display" id="hiddenq"><p id="closebutton">&#10006;</p></button>
  <div class="oer-analytics" id="oer-analytics-visits">
    <span id="visits-num">
      <span id="googleanalytics-oer">
        <p class="statsnums" id="visits-num">{$ga_stats[0]}</p>
        <p class="oer-analytics-small-descr">views</p>
      </span>
    </span>
  </div>
</div>
<button class="hovershow" id="oer-analytics-buttona" aria-label="click this for usage data on this course or resource" type="button"></button>
EOD
);
  }

    } else {
      return;
    }
  }
}


