<?php
// $Id$

/**
* @file
* Implements functions to grab media analytics for OERbit site
* Displays analytics on appropriate course or resource pages.
*/

/** Helper Functions **/

function today() {
	$today = getdate();
	$mon = $today["mon"];
	$day = $today["mday"];
	$yr = $today["year"];
	if ($mon < 10) {
		$mon = "0".$mon;
	}
	if ($day < 10) {
		$day = "0".$day;
	}
	$curr_date = $yr."-".$mon."-".$day;
	return $curr_date;
} 


// for getting youtube video data RESTfully (TODO: update)
function get_value_fragile($id_string, $xml_string)
{
	$amt = strlen($id_string);
	$place = strpos($xml_string, $id_string);
	$matches = array();
	preg_match('%\d+%', substr($xml_string, $place+$amt), $matches);
	return $matches[0];
}

// Database table UPDATES TODO ASAP
// sub-cron distinctions TODO !



/** functions to get info (including making API calls) **/

// TODO most code below needs refactoring

/* FUNCTION to get (correct, aliased) page path from an OERbit node number */
function get_pagepath($nodenum) {
	$from_db = db_query("SELECT dst FROM {url_alias} WHERE src LIKE 'node/{$nodenum}'");
	while ($paths = db_fetch_object($from_db)) {
		$p = $paths->dst;
	}
	return $p; // hopefully -- there's always 1 as appropriate and this works
} // does this need better error checking? probably yes


// FUNCTION to get stats by video (given video id and stat desired)
function get_video_data($videoid, $param) // expects one of: 'views', 'comments', 'favs' as param, (in future incl: 'likes', or 'shares')
{
	$baseurl = "https://gdata.youtube.com/feeds/api/videos/".$videoid."?v=2";
	$result = drupal_http_request($baseurl);
	$res = $result->data;
	$dom = new DOMDocument;
	$dom->loadXML($res); 
	$result_str = $dom->saveXML();

	$xml_str = simplexml_load_string($result_str); // errors here and surrounding result from BR-> $res is empty in ln115 (comments? test output with others where infrastructure exists)
	$title = $xml_str->title;

	// fragile and silly, but as ~placeholder -- easily adjustable for diff vals
	if ($param == 'views') {
		return get_value_fragile("viewCount=", $result_str);
	}
	if ($param == 'comments') {
		return get_value_fragile("countHint=", $result_str);
	}
	if ($param == 'favs') {
		return get_value_fragile("favoriteCount=", $result_str); // but don't display these in phase1
	}
	return "ERROR"; // if it gets past all the others - tmpry control
}


/********* HOOK METHODS *********/


/**
* Implements hook_cron().
*/

// may need to implement sub-functions so as to not do a ton of db calling each time, update daily or w/e

function oer_analytics_cron() {

	// non-API call population of vids table
	$vid_db_info = db_query("SELECT field_course_reference_nid, field_video_value FROM {content_field_video} INNER JOIN {content_field_course_reference} WHERE content_field_video.nid = content_field_course_reference.nid AND content_field_video.field_video_provider='youtube' GROUP BY content_field_video.field_video_value"); 

	$vid_items = array();
	while ($row = db_fetch_object($vid_db_info)) {
		$v_id = $row->field_video_value;
		if (strpos($v_id, "PLAYLIST") === FALSE) {
			$vid_items[$v_id] = array($row->field_course_reference_nid, get_video_data($v_id, "views"), get_video_data($v_id, "comments"));
		}
	}

	$assoc_courses = array();
	foreach($vid_items as $vid => $cnid) { // Y
		//drupal_set_message("Adding stuff to YT table");
		//$assoc_courses[$cnid[0]] = array();
		$assoc_courses[$cnid[0]] = array('views'=>0,'comments'=>0); // just set up associative arr
		drupal_set_message($cnid[0]."-".$cnid[1]."-".$cnid[2]);
		db_query("INSERT INTO {oer_analytics_vids} (videoid, course_nid, totalviews, totalcomments) VALUES ('{$vid}', {$cnid[0]}, {$cnid[1]}, {$cnid[2]})"); 
	} 


	// (TODO) for now, extracting from populated vids table because it's not broken from before
	// populating youtube table
	$extr_vids = db_query("SELECT course_nid, totalviews, totalcomments FROM {oer_analytics_vids}");
	$yt_info = array();
	while ($row = db_fetch_object($extr_vids)) {
		$c_ref = $row->course_nid;
		$yt_info[$c_ref] = array($row->totalviews, $row->totalcomments);
	}


	// foreach($vid_items as $vid => $cnid) {
	// 	//db_query("INSERT INTO {oer_analytics_youtube} (course_nid, totalviews, totalcomments) VALUES ({$cnid}, {$vals[0]}, {$vals[1]})");
	// 	$assoc_courses[$cnid[0]]["views"] += $cnid[1];
	// 	$assoc_courses[$cnid[0]]["comments"] += $cnid[2];
	// }

	foreach($yt_info as $cref => $vals) {
		$assoc_courses[$cref]["views"] += (int) $vals[0];
		drupal_set_message("current views for {$cref} is: {$assoc_courses[$cref]['views']}");
		$assoc_courses[$cref]["comments"] += (int) $vals[1];
		drupal_set_message("current comments for ${cref} is: {$assoc_courses[$cref]['comments']}");
	}

	foreach($assoc_courses as $cnid => $vals) {
		db_query("INSERT INTO {oer_analytics_youtube} (course_nid, totalviews, totalcomments) VALUES ({$cnid}, {$vals["views"]}, {$vals["comments"]})");
	}


	//// populating courses table (more later? see Google_Analytics_Counter module)
	//// commented out b/c for now, no need
	// $course_db_nids = db_query("SELECT nid FROM {content_type_course} GROUP BY content_type_course.nid"); // should be all course nids

	// $course_items = array();
	// while ($row = db_fetch_object($course_db_nids)) {
	// 	$c_nid = $row->nid;
	// 	array_push($course_items, $c_nid); // tmp: just creating an array of course nids (extra work, but to be sure)
	// }

	// foreach($course_items as $nid) {
	// 	db_query("INSERT INTO {oer_analytics_courses} (nid) VALUES ({$nid})");
	// }
	
}





/**
* Implementation of hook_block().
*/
function oer_analytics_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks['oer-analytics'] = array(
        'info' => t('Course Analytics'),
        'cache' => BLOCK_CACHE_PER_PAGE, // remember day cached, for speeding things up
      );
      return $blocks;
    case 'view':
      if (arg(0) == 'node' && is_numeric(arg(1))) { // node_load() -- check node type..
        return _oer_analytics_block(arg(1)); // gets info that will be displayed
      }
  }
} 

function _oer_analytics_block($nid) {
	$node = node_load($nid);
	if ($node->type == 'course') { // correct check?? TODO -- if this, get stuff and themeify and all that
		$stats = array();
		$full_stats = array();
		$vidcount = array();
		//$db_res = db_query("SELECT oer_analytics_courses.totalviews, oer_analytics_courses.total_zipdownloads, oer_analytics_youtube.totalviews, oer_analytics_youtube.totalcomments FROM {oer_analytics_courses} OUTER JOIN {oer_analytics_youtube} WHERE oer_analytics_youtube.course_nid = {$nid} or oer_analytics_courses.nid = {$nid}");

		//tmp -- these should really all be consolidated -- but just for now
		$db_res = db_query("SELECT course_nid, totalviews, totalcomments FROM {oer_analytics_youtube} WHERE course_nid = {$nid}");

		//$db_ga_res = db_query("SELECT nid, totalviews, total_zipdownloads FROM {oer_analytics_courses} WHERE nid = {$nid}");

		$db_res_vids = db_query("SELECT videoid FROM {oer_analytics_vids} WHERE course_nid={$nid}");

		$num_rows = $db_res_vids->num_rows;

		// similarly, these should all be consolidated.

		// while ($row = db_fetch_object($db_res_vids)) {
		// 	array_push($vidcount, "i");
		// }

		while ($row = db_fetch_object($db_res)) {
			//$yt_view = $row->oer_analytics_courses.totalviews;
			$yt_views = $row->totalviews;
			$yt_comm = $row->totalcomments;
			$stats[$row->course_nid] = array($yt_views, $yt_comm);
		}

		while ($row = db_fetch_object($db_ga_res)) {
			$courseviews = $row->totalviews;
			$dls = $row->total_zipdownloads;
			$gastats[$row->nid] = array($courseviews, $dls);
		}

		foreach($stats as $num=>$arr) {
			array_push($full_stats, "<b>Aggregate Youtube Views:</b> {$arr[0]}");
			array_push($full_stats, "<b>Aggregate Youtube Comments:</b> {$arr[1]}");
			array_push($full_stats, "<b>Youtube Vids in Course:</b> {$num_rows}");
		}

		// fill in more later
		if (!empty($full_stats)) {
			return array(
				'subject' => t('Course Analytics'),
				//'content' => theme_item_list(array_merge($full_ga, $full_stats))
				'content' => theme_item_list($full_stats)
			);
		} else {
			return;
		}
	}
}


